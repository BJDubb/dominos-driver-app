// This file has been autogenerated from a class added in the UI designer.

using System;
using AVFoundation;
using Foundation;
using UIKit;
using VisionKit;
using Vision;
using CoreFoundation;
using CoreGraphics;
using MapKit;
using CoreLocation;
using System.Linq;

namespace DominosFloat
{

    public partial class ThirdViewController : UIViewController, IVNDocumentCameraViewControllerDelegate, ICLLocationManagerDelegate, IMKMapViewDelegate
	{
        string name = "";
        string phoneNumber = "";
        string address = "";

        private CLLocation currentLocation = null;


        CLLocationManager locationManager;
        private MKMapItem destination = null;

        public ThirdViewController (IntPtr handle) : base (handle)
		{
		}

        private void ResetUI()
        {
            name = "";
            nameLabel.Text = "";
            phoneNumber = "";
            address = "";

            nameLabel.Hidden = true;
            callBtn.Hidden = true;
            mapBtn.Hidden = true;
            completeDeliveryBtn.Hidden = true;
            mapView.Hidden = true;

            callBtn.RemoveTarget(CallNumber, UIControlEvent.TouchUpInside);
            mapBtn.RemoveTarget(OpenMaps, UIControlEvent.TouchUpInside);
            completeDeliveryBtn.RemoveTarget(CompleteDelivery, UIControlEvent.TouchUpInside);

            openCameraBtn.Hidden = false;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            ResetUI();

            AVCaptureDevice.RequestAccessForMediaType(AVAuthorizationMediaType.Video, (result) =>
            {
                if (!result) return; 
            });

            var auth = AVCaptureDevice.GetAuthorizationStatus(AVAuthorizationMediaType.Video);
            locationManager = new CLLocationManager();
            locationManager.RequestWhenInUseAuthorization();

            if (CLLocationManager.LocationServicesEnabled)
            {
                locationManager.Delegate = this;
                locationManager.DesiredAccuracy = CLLocation.AccuracyBest;
                locationManager.StartUpdatingLocation();
            }

            mapView.Delegate = this;
            mapView.MapType = MKMapType.Standard;
            mapView.ZoomEnabled = true;
            mapView.ScrollEnabled = true;
            mapView.ShowsUserLocation = true;

            if (mapView.UserLocation.Location?.Coordinate != null)
            {
                mapView.SetCenterCoordinate(mapView.UserLocation.Location.Coordinate, true);
            }
            
            openCameraBtn.AddTarget(OpenCameraScanner, UIControlEvent.TouchUpInside);
        }

        [Export("locationManager:didUpdateLocations:")]
        public void LocationsUpdated(CLLocationManager manager, CLLocation[] locations)
        {
            currentLocation = locations.ToArray().First();
        }

        private void OpenCameraScanner(object sender, EventArgs args)
        {
            VNDocumentCameraViewController vc = new VNDocumentCameraViewController();
            //vc.comm
            vc.Delegate = this;
            PresentViewController(vc, true, null);
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
            // Release any cached data, images, etc that aren't in use.
        }


        [Export("documentCameraViewController:didFinishWithScan:")]
        public void DidFinish(VNDocumentCameraViewController controller, VNDocumentCameraScan scan)
        {
            var request = new VNRecognizeTextRequest((VNRequest req, NSError error) => {

                var results = req.GetResults<VNRecognizedTextObservation>();
                ProcessImage(results);                
            });
            request.RecognitionLevel = VNRequestTextRecognitionLevel.Accurate;
            request.RecognitionLanguages = new string[] { "en_US" };
            request.CustomWords = new string[] { "------------------------------", "Map Ref:" , "Tax Invoice" };
            request.UsesLanguageCorrection = true;
            var image = scan.GetImage(0);
            var handler = new VNImageRequestHandler(image.CGImage, new VNImageOptions());
            DispatchQueue.DefaultGlobalQueue.DispatchAsync(() =>
            {
                handler.Perform(new VNRequest[] { request }, out NSError error);
            });

            controller.DismissViewController(true, null);
        }

        private void ProcessImage(VNRecognizedTextObservation[] results)
        {
            for (int i = 0; i < results.Length; i++)
            {
                string line = results[i].TopCandidates(1)[0].String;
                if (line == "Tax Invoice")
                {
                    name = results[i + 1].TopCandidates(1)[0].String;
                    address = results[i + 2].TopCandidates(1)[0].String + " " + results[i + 3].TopCandidates(1)[0].String;
                }
                if (line.StartsWith("(04)") || line.StartsWith("(02)"))
                {
                    phoneNumber = line.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "");
                }
            }

            
            InvokeOnMainThread(() =>
            {
                MKLocalSearchRequest searchReq = new MKLocalSearchRequest(address, mapView.Region);
                MKLocalSearch search = new MKLocalSearch(searchReq);

                search.Start(OnSearchCompleted);
            });
        }

        private void CompleteDelivery(object sender, EventArgs e)
        {
            ResetUI();
        }

        [Export("mapView:rendererForOverlay:")]
        public MKOverlayRenderer OverlayRenderer(MKMapView mapView, IMKOverlay overlay)
        {
            if (overlay is MKPolyline line)
            {
                var pr = new MKPolylineRenderer(line);
                pr.StrokeColor = UIColor.SystemBlueColor;
                pr.LineWidth = 5;
                return pr;
            }

            return null;
        }

        private void CallNumber(object sender, EventArgs args)
        {
            UIApplication.SharedApplication.OpenUrl(new NSUrl($"tel://{phoneNumber}"));
        }

        private void OpenMaps(object sender, EventArgs args)
        {
            if (destination != null)
            {
                destination.OpenInMaps(new MKLaunchOptions() { DirectionsMode = MKDirectionsMode.Driving, MapType = MKMapType.Standard, ShowTraffic = true });
            }
        }

        private void OnCalculateDirections(MKDirectionsResponse directionResponse, NSError directionError)
        {
            if (directionError != null)
            {
                Console.WriteLine(directionError.Code);
                Console.WriteLine(directionError.UnderlyingErrors);
            }
            var route = directionResponse.Routes[0];

            foreach (var overlay in mapView.Overlays ?? Enumerable.Empty<IMKOverlay>())
            {
                mapView.RemoveOverlay(overlay);
            }

            mapView.AddOverlay(route.Polyline, MKOverlayLevel.AboveRoads);

            var rect = route.Polyline.BoundingMapRect;
            var region = MKCoordinateRegion.FromMapRect(rect);
            region.Span.LatitudeDelta *= 1.2;
            region.Span.LongitudeDelta *= 1.2;
            mapView.SetRegion(region, true);
        }

        private void OnSearchCompleted(MKLocalSearchResponse response, NSError error)
        {
            if (error != null || response is null || response.MapItems is null) // If no address was found
            {
                ResetUI();


                var alert = UIAlertController.Create("Error", "There was an error reading the address. Try scanning the recipt again.", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Cancel, null));
                PresentViewController(alert, true, null);
                return;
            }

            nameLabel.Text = name;

            nameLabel.Hidden = false;
            callBtn.Hidden = false;
            mapBtn.Hidden = false;
            mapView.Hidden = false;
            completeDeliveryBtn.Hidden = false;

            openCameraBtn.Hidden = true;

            mapBtn.AddTarget(OpenMaps, UIControlEvent.TouchUpInside);
            callBtn.AddTarget(CallNumber, UIControlEvent.TouchUpInside);
            completeDeliveryBtn.AddTarget(CompleteDelivery, UIControlEvent.TouchUpInside);

            foreach (var place in response.MapItems)
            {
                var ann = new MKPointAnnotation(place.Placemark.Coordinate, place.Name, "Test");
                foreach (var annotation in mapView.Annotations ?? Enumerable.Empty<IMKAnnotation>())
                {
                    mapView.RemoveAnnotation(annotation);
                }
                mapView.ShowAnnotations(new IMKAnnotation[] { ann }, true);
                var directionRequest = new MKDirectionsRequest();
                directionRequest.Source = MKMapItem.MapItemForCurrentLocation();//new MKMapItem(new MKPlacemark(currentLocation.Coordinate));
                directionRequest.Destination = place;
                directionRequest.TransportType = MKDirectionsTransportType.Automobile;

                destination = place;

                var directions = new MKDirections(directionRequest);
                directions.CalculateDirections(OnCalculateDirections);
            }
        }
    }
}
